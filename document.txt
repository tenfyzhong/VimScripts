"==============================================================
"    file: vim-abolish.vim
"   brief: 一次查找,替换,缩写多个字符串
"
" command: 
"	:Abolish [options] {abbreviation} {replacement}
"	:Abolish -delete [options] {abbreviation}
"	:Abolish -search [options] {pattern}
"	:Subvert/{pattern}[/flags]
"	:Abolish!-search [options] {pattern}
"	:Subvert?{pattern}[?flags]
"	:Abolish -search [options] {pattern} {grep-arguments}
"	:Subvert /{pattern}/[flags] {grep-options}
"	:Abolish!-search [options] {pattern} {grep-arguments}
"	:Subvert!/{pattern}/[flags] {grep-options}
"	:[range]Abolish -substitute [options] {pattern} {replacement}
"	:[range]Subvert/{pattern}/{replacement}[/flags]
"
"	eg:
"	:%S/{,un}nec{ce,ces,e}sar{y,ily}/{}nec{es}sar{}/g
"==============================================================

"==============================================================
"    file: CmdlineComplete.vim
"   brief: 命令行模式下调用<c-p><c-n>来补全buffer中存在的字符串
"==============================================================

"==============================================================
"    file: d2.vim
"   brief: 
"==============================================================

"==============================================================
"    file: thrift.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-swap.vim
"   brief: 交换items
"
"    nmap: 
"       g< 与左边项交换
"       g> 与右边项交换
"       gs 进入交互模式
"    xmap:
"       gs 交互模式
"==============================================================

"==============================================================
"    file: vim-rename.vim
"   brief: 重命名当前的buffer文件
"
" command: Rename {new name}
"==============================================================

"==============================================================
"    file: bullets.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-boxdraw.vim
"   brief: 画图
"
" command:
"          BoxdrawEnable  开启画图模式
"          BoxdrawDisable 关闭画图模式
"          BoxdrawToggle  开启/关闭画图模式
"
"    nmap:
"          <leader>bt  BoxdrawToggle
"
"==============================================================

"==============================================================
"    file: vim-matchup.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-fugitive.vim
"   brief: 运行git命令
"
" command: 
"     Git! [args] 运行git命令,先cd到版本库的根目录,再执行!git [args],叹号会将输入放到一个临时buffer中
"     Gcd [directory] cd到版本库的相对目录
"     Glcd [directory] lcd到版本库的相对目录
"     Gstatus 显示当前版本库的状态
"     Gcommit [args] 提交修改,没有内容提交时会执行Gstatus
"     Gmerge [args] 合并
"     Gpull [args] git pull
"     Gpush [args] git push
"     Gfetch [args] git fetch
"     Ggrep [args] git-grep
"     Glgrep [args] git-grep
"     {range}Glog [args] git log
"     Gllog [args] like Glog
"     Gedit [revision] :edit a fugitive-revision
"     Gsplit! [revision] :split a fugitive-revison
"     Gvsplit! [revision] :vsplit a fugitive-revison
"     Gtabedit! [revision] :tabedit a fugitive-revison
"     Gpedit! [revision] :pedit a fugitive-revison
"     {range}Gread [revision] 读入一个revision到一个新buffer，保留range的内容
"     {range}Gread! [args] 清空buffer，将args命令的内容写到buffer，保留range的内容
"     Gwrite {path} 将文件写入path
"     Gwq[!] [path] 类似于Gwrite!,写成功的话就执行:quit[!]命令
"     Gdiff [revision] 使用vimdiff与一个revision的内容做比较，不给revision就用index的内容做比较
"     Gsdiff [revision] 类似于Gdiff，但是总是split
"     Gvdiff [revision] 类似于Gdiff，但是总是vertical split
"     Gmove[!] {destination} git mv，!相当于传参数-f
"     Gremove[!] 删除当前buffer,如果是在index中的文件,--cached会传过去,!会传入-f
"     {range}Gblame [flags] 运行git-blame,flags可以是ltfnsewMC,传给git-blame,range会作用于特定范围
"     Gbrowse {revision} 打开当前file,blob,tree,commit,tag的上流
"     Gbrowse [...]@{remote} 强制使用给定的remote
"     {range}Gbrowse[!] [args] 
"
"    nmap: <leader>gw Gwrite
"          <leader>gc Gcommit
"          <leader>gb Gblame
"          <leader>gd Gvdiff
"          <leader>gl Glog
"          <leader>gs Gstatus
"          <leader>gho Gbrowse
"
"    cmap: <c-r><c-g> 在命令行中返回当前文件
"          ["x]y<c-g> 粘贴当前对象的提交sha值
"    在git object下的map
"    nmap:
"      <CR> Jump to the revision under the cursor.
"      o    Jump to the revision under the cursor in a new split.
"      S    Jump to the revision under the cursor in a new vertical split.
"      O    Jump to the revision under the cursor in a new tab.
"      -    Go to the tree containing the current tree or blob.
"      ~    Go to the current file in the [count]th first ancestor.
"      P    Go to the current file in the [count]th parent.
"      C    Go to the commit containing the current file.
"      .    Start a : command line with the current revision prepopulated at the end of the line.
"      a    Show the current tag, commit, or tree in an alternate format.
"==============================================================

"==============================================================
"    file: vim-multiple-cursors.vim
"   brief: 选择多个相同的字符串
"
" command: MultipleCursorFind 在整个文件或者range中匹配
"
"    nmap: <c-n> 选择下一个匹配
"          <c-p> 选择上一个匹配
"          <c-x> 跳过当前的匹配 
"==============================================================

"==============================================================
"    file: cow.vim
"   brief: 
"==============================================================

"==============================================================
"    file: gounit-vim.vim
"   brief: 生成单元测试
"
" command: GoUnit                       生成当前行的函数测试
"          GoUnitTemplateAdd /file/name 把文件添加到模板
"          GoUnitTemplateDel template   删除模板
"          GoUnitTemplateList           列出所有模板
"          GoUnitTemplateUse template   设置默认模板
"
"    nmap:
"      <leader>rtg GoUnit
"==============================================================

"==============================================================
"    file: vim-go.vim
"   brief: go-ide
"
" command: GoPath [path] 设置GOPATH
"          GoImport[!] [path] import一个包
"          GoImportAs [localname] [path] import一个包 alias一个名
"          GoDrop [path] 移除一个包
"          GoLint [packages] 使用golint格式化包
"          GoDoc [word] 打开文档
"          GoDocBrowser [word] 在浏览器中打开文档
"          GoFmt 格式化代码
"          GoImports import包和删除不需要的包
"          [range]GoPlay 分享代码到play.golang.org
"          GoVet[!] [options] 调用go vet
"          GoDef [identifier] 跳到声明或者定义
"          GoDefStack [number] 打开GoDef的跳转列表
"          GoDefStackClear 清除GoDefStack
"          GoDefPop [count] 跳回到上一次调用GoDef的地方
"          GoRun[!] [expand] 运行当前包的main函数
"          GoBuild[!] [expand] go build构建当前包
"          GoGenerate[!] [expand] go generate
"          GoInfo 显示cursor下函数的声明
"          GoInstall[!] [options] 安装包
"          GoTest[!] [expand] 运行测试
"          GoTestFunc[!] [expand] 运行特定的测试函数
"          GoTestCompile[!] [expand] 编译测试包
"          GoCoverage[!] [options] 生成覆盖报告
"          GoCoverageToggle[!] [options] 在GoCoverage和GoCoverageClear中转换
"          GoCoverageClear [options] 清除覆盖报告
"          GoCoverageBrowser[!] [options] 在浏览器中产生覆盖报告
"          GoErrCheck [options] 检查错误
"          GoFiles 显示当前包的文件
"          GoDeps 显示当前包的依赖
"          GoInstallBinaries 安装这个vim插件需要的包
"          GoUpdateBinaries 更新这个vim插件需要的包
"          GoImplements 显示选择包的实现接口
"          GoRename [to] 重命名
"          GoGuruScope [pattern] [pattern2] ... [patternN]
"          GoCallees 显示调用
"          GoCallers 显示被调用
"          GoDescribe 显示选择的语法和属性
"          GoCallstack 显示调用栈
"          GoFreevars 抽离出自由变量
"          GoChannelPeers 显示可能的发送接收channel
"          GoReferrers 查询引用
"          GoSameIds 高亮相同的identifiers
"          GoSameIdsClear 去除identifiers的高亮
"          GoSameIdsToggle 在GoSameIds和GoSameIdsClear中切换
"          GoSameIdsAutoToggle 触发启动自动高亮identifiers
"          GoMetaLinter [path] 调用gometalinter进行检查 
"          GoBuildTags [tags] 
"          AsmFmt 
"          GoAlternate[!] 在源文件和测试文件中切换
"          GoPointsTo 显示所有可能指向当前变量的指针
"          GoWhicherrs 显示当前可能的错误
"          GoDecls [file] 启动ctrlp.vim时才能用，显示所有的声明
"          GoDeclsDir [dir] 启动ctrlp.vim时才能用，显示所有的声明
"          GoImpl [receiver] [interface] 实现接口
"          [range]GoAddTags [key],[option] [key1],[option1] ... 给成员增加tag
"          [range]GoRemoveTags [key],[option] [key1],[option1] ... 给成员删除tag
"          GoAutoTypeInfoToggle toggle g:go_auto_type_info
"          GoFmtAutoSaveToggle toggle g:go_fmt_autosave
"          GoModFmtAutoSaveToggle toogle g:go_mod_fmt_autosave
"          GoAsmFmtAutoSaveToggle toggle g:go_asmfmt_autosave
"          GoMetaLinterAutoSaveToggle toggle g:go_metalinter_autosave
"          GoTemplateAutoCreateToggle toggle g:go_template_autocreate
"          GoKeyify 使用keyify来格式化结构
"          GoFillStruct 使用默认值填充struct没赋值的字段
"          GoIfErr 生成if err != nil {return ...}的错误返回
"          GoModFmt 使用go mod edit -fmt命令来过滤当前buffer
"
"          A 源文件和测试文件中切换
"          AV 源文件和测试文件中切换，在vsplit中打开
"          AS 源文件和测试文件中切换，在split中打开
"          AT 源文件和测试文件中切换，在tab中打开
"
"    nmap: <leader>rs go-implements
"          <leader>rd go-info
"          <leader>re go-rename
"          <leader>rr go-run
"          <leader>rb go-build
"          <leader>rtt go-test
"          <leader>rtf go-test-func
"          <leader>rc go-coverage
"          <leader>ri GoImport
"          <leader>ra GoImportAs
"          <leader>rf GoIfErr
"          <leader>aa go-alternate-edit
"          <leader>as go-alternate-split
"          <leader>av go-alternate-vertical
"          <leader>rh YCMHover
"          <c-q> GoReferrers
"          <C-]> GoDef
"          <C-t> GoDefPop
"==============================================================

"==============================================================
"    file: golint-fixer.vim
"   brief: 修复请求错误
"
" command: GoLintFix 修复当前行的错误
"
"    nmap: <leader>lf :GoLintFix
"==============================================================

"==============================================================
"    file: godoctor.vim
"   brief: go重构工具
"   文档 http://gorefactor.org/doc.html 
"
" command: GoRefactor 启动重构
"
"==============================================================

"==============================================================
"    file: reftools.vim
"   brief: reftools的工具
"
" command: Fixplurals 去除参数中的多余类型
"          Fillstruct 填充当前行的结构成员
"          Fillswitch 填充当前switch的case
"
"    nmap:
"     <leader>rtp 运行fixplurals
"     <leader>rts 运行fillstruct
"     <leader>rtw 运行fillswitch
"==============================================================

"==============================================================
"    file: vim-delve.vim
"   brief: go的调试器，依赖delve
"
" command:
"    | `DlvAddBreakpoint`             | Add a breakpoint at the current line.
"    | `DlvAddTracepoint`             | Add a tracepoint at the current line.
"    | `DlvAttach <pid> [flags]`      | Attach `dlv` to a running process.
"    | `DlvClearAll`                  | Clear all the breakpoints and tracepoints in the buffer.
"    | `DlvCore <bin> <dump> [flags]` | Debug core dumps using `dlv core`.
"    | `DlvDebug [flags]`             | Run `dlv debug` for the current session. Use this to test `main` packages.
"    | `DlvExec <bin> [flags]`        | Start `dlv` on a pre-built executable.
"    | `DlvRemoveBreakpoint`          | Remove the breakpoint at the current line.
"    | `DlvRemoveTracepoint`          | Remove the tracepoint at the current line.
"    | `DlvTest [flags]`              | Run `dlv test` for the current session. Use this to debug non-`main` packages.
"    | `DlvToggleBreakpoint`          | Convenience method to toggle (add or remove) a breakpoint at the current line.
"    | `DlvToggleTracepoint`          | Convenience method to toggle (add or remove) a tracepoint at the current line.
"    | `DlvVersion`                   | Print the `dlv` version.
"==============================================================

"==============================================================
"    file: markdown-preview.vim
"   brief: markdown预览，依赖nodejs和yarn
"
" command:
"       MarkdownPreview 打开预览窗口
"       MarkdownPreviewStop 关闭 markdown 预览窗口，并停止开启的服务进程
"    nmap:
"       <leader>rp 打开预览
"       <leader>rs 停止预览
"==============================================================

"==============================================================
"    file: xterm-color-table.vim
"   brief: 
"==============================================================

"==============================================================
"    file: nvim-cmp.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-commentary.vim
"   brief: 注释行
"
" command: [range]Commentary 注释或者取消注释行
"
"    ncmd:
"    gc{motion} 注释或者取消注释motion
"    gcc 注释或者取消注释行
"    {Visual}gc 注释或者取消注释选择行
"    gc text object注释
"    gcgc gcu 取消注释
"==============================================================

"==============================================================
"    file: ultisnips.vim
"   brief: 提供snippet
"
" command: UltiSnipsEdit[!] 为当前filetype打开一个snippet编辑窗口
"          UltiSnipsAddFileTypes 合并其他文件类型的snippet
"
"    imap: <c-j>展开
"          <c-tab>列出snippets
"          <c-j>跳到下一个位置
"          <c-k>跳到上一个位置
"==============================================================

"==============================================================
"    file: vim-bbye.vim
"   brief: 删除buffer但是不关闭window
"
" command: Bdelete 删除buffer
"    nmap: <leader>bd :Bdelete
"==============================================================

"==============================================================
"    file: tar.vim
"   brief: 自动打开tar包
"==============================================================

"==============================================================
"    file: vim-markdown-toc.vim
"   brief: generate table of contents for Markdown files
"
"  command: 
"       GenTocGFM       生成GFM格式的toc
"       GenTocRedcarpet 生成redcarpet格式的toc
"       GenTocGitLab    生成gitlab格式的toc
"       GenTocMarked    生成marked格式的toc
"==============================================================

"==============================================================
"    file: jumpy.vim
"   brief: 
"==============================================================

"==============================================================
"    file: ftemplate.vim
"   brief: 自动根据文件类型插入文件头注释
"
" command: Ftemplate 在文件头部插入注释
"
"==============================================================

"==============================================================
"    file: autoflake.vim
"   brief:
"==============================================================

"==============================================================
"    file: coverage-highlight.vim
"   brief: 
"==============================================================

"==============================================================
"    file: python-mode.vim
"   brief: 
"    help: pymode
"
" motion:
" ========  ============================
" Key               Command
" ========  ============================
" [[        Jump to previous class or function (normal, visual, operator modes)
" ]]        Jump to next class or function  (normal, visual, operator modes)
" [M        Jump to previous class or method (normal, visual, operator modes)
" ]M        Jump to next class or method (normal, visual, operator modes)
" aC        Select a class. Ex: vaC, daC, yaC, caC (normal, operator modes)
" iC        Select inner class. Ex: viC, diC, yiC, ciC (normal, operator modes)
" aM        Select a function or method. Ex: vaM, daM, yaM, caM (normal, operator modes)
" iM        Select inner function or method. Ex: viM, diM, yiM, ciM (normal, operator modes)
" ========  ============================
"
" command:
"     PymodeDoc <args> 显示文档
"     PymodeVirtualenv <path> 激活virtualenv
"     PymodeRun 运行当前buffer或者选择的块
"     PymodeLint 检查代码
"     PymodeLintToggle 触发检查
"     PymodeLintAuto fix pep8错误
"     PymodeRopeAuto import当前cursor下的元素
"     PymodeRopeModuleToPackage
"     PymodeRopeNewProject 打开一个新的rope工程
"     PymodeRopeRedo 重做上一次重构
"     PymodeRopeRegenerate 重新生成工程cache
"     PymodeRopeRenameModule 重命名当前module
"     PymodeRopeUndoe 撤消重构
"
"    nmap:
"     <leader>rr :PymodeRun
"     <leader>rb 设置断点
"     <leader>ra autoimport
"     <leader>rg 跳到定义
"     <leader>rd show document
"     <leader>rf find it
"     <leader>ro organize import
"     <leader>re 重命名
"     <leader>r1m 重命名模块
"     <leader>r1p module to package
"     <leader>rm 提取方法
"     <leader>rl 提取变量
"     <leader>ri rope inline
"     <leader>rv move method/fields
"     <leader>rnf generate function
"     <leader>rnc generate class
"     <leader>rnp generate package
"     <leader>rs change signature
"     <leader>ru use function
"==============================================================

"==============================================================
"    file: vim-isort.vim
"   brief: 对import进行排序
"
" command:
"     Isort 排序
"
"    nmap:
"     <leader>is :Isort
"
"==============================================================

"==============================================================
"    file: Dockerfile.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-startify.vim
"   brief: 启动vim时显示最近使用的文件书签和session
"
" command: Startify 手动触发startify
"          SLoad [session] 加载session
"          SSave [session] 保存session
"          SDelete[!] [session] 删除session
"          SClose 关闭session
"==============================================================

"==============================================================
"    file: vim-mql5.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-mql4.vim
"   brief: 
"==============================================================


"==============================================================
"    file: vim-highlightedyank.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-select-replace.vim
"   brief: 选择替换，支持重复操作
"
"    omap: 
"        *
"        #
"        g*
"        g#
"
"    xmap:
"        x
"        s
"==============================================================

"==============================================================
"    file: vim-gitgutter.vim
"   brief: 显示文件行的修改状态
"
" command: GitGutterDisable 关闭GitGutter
"          GitGutterEnable 打开GitGutter
"          GitGutterToggle 触发GitGutter
"          GitGutter 更新状态
"          GitGutterAll 更新所有buffer的状态
"          GitGutterSignsEnable 打开行状态
"          GitGutterSignsDisable 关闭行状态
"          GitGutterSignsToggle 触发行状态
"          GitGutterLineHighlightsEnable 打开高亮
"          GitGutterLineHighlightsDisable 关闭高亮
"          GitGutterLineHighlightsToggle  触发高亮
"          GitGutterNextHunk 跳到下一个修改的块
"          GitGutterPrevHunk 跳到上一个修改的块
"          GitGutterUndoHunk 将当前块添加到stage区
"          GitGutterRevertHunk 回滚当前块的stage区
"          GitGutterPreviewHunk 预览当前块
"
"        nmap: 
"          [h GitGutterPrevHunk
"          ]h GitGutterNextHunk
"          <leader>ga GitGutterStageHunk
"          <leader>gr GitGutterUndoHunk
"          <leader>gp GitGutterPreviewHunk
"          <leader>gg :GitGutter
"==============================================================

"==============================================================
"    file: st2.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-fish.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-session.vim
"   brief: 保存加载session
"
" command: SaveSession[!] 保存session,!会直接覆盖同名的session而不提示
"          OpenSession[!] 加载session,!会忽略已经加载的提示
"          RestartVim 保存当前的session,重新打开vim和加载session
"          CloseSession[!] 关闭所有的窗口和buffer,然后打开一个空的buffer,!会忽略所有的未保存修改而不提示
"          DeleteSession[!] 删除session,!会忽略删除当前正打开的session的告警
"          ViewSession[!] 查看session的脚本
"          OpenTabSession 类似于OpenSession，但是只请求当前的tab页
"          SaveTabSession 类似于SaveSession，但是只请求当前的tab页
"          AppendTabSession 打开一个新的tab页，加载给定的scoped session
"          CloseTabSession 类似于CloseSession，但是只请求当前的tab页
"==============================================================

"==============================================================
"    file: tagbar.vim
"   brief: 浏览tag的工具
"
" command: TagbarOpen [{flags}] 打开tagbar
"          TagbarClose 关闭tagbar
"          TagbarToggle 触发bagbar
"          TagbarTogglePause 触发冻结当前的tagbar,文件间切换也不会变
"          TagbarOpenAutoClose 打开tagbar窗口后,选择完就关闭
"          TagbarSetFoldlevel[!] {number} 设置折叠级别
"          TagbarShowTag 显示当前结点
"          TagbarCurrentTag [{flags}] 回显当前结点
"          TagbarGetTypeConfig {filetype} 粘贴filetype的配置
"
"    nmap: <leader>tb :TagbarToggle
"          <leader>tf :TagbarOpen fb
"==============================================================

"==============================================================
"    file: ejs-syntax.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-node.vim
"   brief: 
" 
" command: Nedit module_name 编辑模块的main文件
"          Nedit module_name/lib/foo 编辑lib/foo.js文件
"          Nedit . 编辑项目main文件,一般是index.js
"
"    nmap: gf 在require("...")中跳到对应的模块
"          [I 查询当前字符需要的文件
"==============================================================

"==============================================================
"    file: jquery.vim
"   brief: jquery语法高亮
"==============================================================

"==============================================================
"    file: html5.vim
"   brief: html5高亮缩进补全
"==============================================================

"==============================================================
"    file: vim-jade.vim
"   brief: jade高亮
"==============================================================

"==============================================================
"    file: typescript.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-css3-syntax.vim
"   brief: css3语法高亮
"==============================================================

"==============================================================
"    file: vim-jinja.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-coffee-script.vim
"   brief: 
"==============================================================


"==============================================================
"    file: vim-javascript.vim
"   brief: js高亮和缩进
"==============================================================

"==============================================================
"    file: vim-stylus.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-airline.vim
"   brief: 
" 
" command: AirlineTheme {theme-name} 切换主题
"          AirlineToggleWhitespace 触发显示空格
"          AirlineToggle 触发airline
"          AirlineRefresh 刷新airline
"
"==============================================================

"==============================================================
"    file: Recover.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-repeat.vim
"   brief: 
"==============================================================

"==============================================================
"    file: targets.vim
"   brief: 
"
" targets:
"    ( ) b     (work on parentheses)
"    { } B     (work on curly braces)
"    [ ]       (work on square brackets)
"    < >       (work on angle brackets)
"        t     (work on tags)
"
" Supported separators:
"    , . ; : + - = ~ _ * # / | \ & $ ~
"
" argument:
"   a
"
"   iaIA后加n或者l为下一个或者上一个target
"==============================================================

"==============================================================
"    file: vim-markdown.vim
"   brief: 
"==============================================================

"==============================================================
"    file: YouCompleteMe.vim
"   brief: 
" 
" command: YcmRestartServer 重启ycmd
"          YcmForceCompileAndDiagnostics 强制编译
"          YcmDiags 列出错误
"          YcmShowDetailedDiagnostic 诊断信息
"          YcmDebugInfo debug信息
"          YcmCompleter 调用编译器的命令
"          YcmCompleter GoToDeclaration 跳到声明
"          YcmCompleter GoToDefinithion 跳到定义
"          YcmCompleter GoTo 跳到定义，如果没有定义，则跳到声明
"          YcmCompleter GoToImprecise 类似于GoTo，但是不进行重新编译
"          YcmCompleter ClearCompilationFlagCache 清掉ycm_extra_conf.py中的flag
"          YcmCompleter StartServer 启动server,仅在cs中支持
"          YcmCompleter StopServer 停止server,仅在cs中支持
"          YcmCompleter RestartServer 重启server,仅在cs中支持
"          YcmCompleter ReloadSolution 重新加载,仅在cs中支持
"          YcmCompleter GoToImplementation 跳到实现,仅在cs中支持
"          YcmCompleter GoToImplementationElseDeclaration 跳到实现,否则跳到声明,仅在cs中支持
"
"          YcmGenerateConfig 生成.ycm_extra_conf.py的配置
"
"==============================================================

"==============================================================
"    file: delimitMate.vim
"   brief: 自动补全右括号引号等
"
" command: :DelimitMateReload 重设所有的map
"          :DelimitMateOn enable DelimitMate mappings
"          :DelimitMateOff disable DelimitMate mappings
"          :DelimitMateSwitch switches DelimitMate on and off
"==============================================================

"==============================================================
"    file: rust.vim
"   brief: 
" 
" command: RustRun [args] 编译运行当前文件
"          RustRun! [rustc-args] [--] [args]
"          RustExpand [args] 使用--pretty扩展当前文件
"          RustExpand! [TYPE] [args]
"          RustEmitIr [args] 编译当前文件到LLVM IR
"          RustEmitAsm [args] 编译当前文件到assembly
"          RustFmt 格式化
"          RustFmtRange 对选择的区域进行格式化
"==============================================================

"==============================================================
"    file: vim-toml.vim
"   brief: 
"==============================================================

"==============================================================
"    file: ctags.vim
"   brief: 使用ctags进行跳转,需要链接tags
"
"    nmap: <c-]> 跳转到当前字符串的定义处,与cscope一起使用的话,先使用cscope的功能
"
"==============================================================

"==============================================================
"    file: vim-scriptease.vim
"   brief: 
"==============================================================

"==============================================================
"    file: helpful.vim
"   brief: 查看vim特性所在的版本
"
" command: HelpfulVersion 加特性名
"==============================================================


"==============================================================
"    file: committia.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-docker-tools.vim
"   brief: 
"==============================================================

"==============================================================
"    file: z.vim
"   brief:  wrapper around the CLI z
"
" command: Z regex 跳转到regex匹配的目录
"          Zl [regex] 根据regex做规则匹配，然后跳转
"==============================================================

"==============================================================
"    file: CompleteParameter.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-easy-align.vim
"   brief: 对齐插件
"   预定制的key: =:.|&#,
" --------------+--------------------------------------------------------------------
" Delimiter key | Description/Use cases                                              
" --------------+--------------------------------------------------------------------
" <Space>       | General alignment around whitespaces
"  `=`            | Operators containing equals sign ( `=` ,  `==,`  `!=` ,  `+=` ,  `&&=` , ...)
"  `:`            | Suitable for formatting JSON or YAML
"  `.`            | Multi-line method chaining
"  `,`            | Multi-line method arguments
"  `&`            | LaTeX tables (matches  `&`  and  `\\` )
"  `#`            | Ruby/Python comments
"  `"`            | Vim comments
" <Bar>         | Table markdown
" --------------+--------------------------------------------------------------------
"
"  交互模式的快捷键
" --------+--------------------+---------------------------------------------------
" Key     | Option             | Values                                            
" --------+--------------------+---------------------------------------------------
" CTRL-F  |  `filter`            | Input string ( `[gv]/.*/?` )
" CTRL-I  |  `indentation`       | shallow, deep, none, keep
" CTRL-L  |  `left_margin`       | Input number or string
" CTRL-R  |  `right_margin`      | Input number or string
" CTRL-D  |  `delimiter_align`   | left, center, right
" CTRL-U  |  `ignore_unmatched`  | 0, 1
" CTRL-G  |  `ignore_groups`     | [], ["String'], ["Comment'], ["String', "Comment']
" CTRL-A  |  `align`             | Input string ( `/[lrc]+\*{0,2}/` )
" <Left>  |  `stick_to_left`     |  `{ 'stick_to_left': 1, 'left_margin': 0 }`
" <Right> |  `stick_to_left`     |  `{ 'stick_to_left': 0, 'left_margin': 1 }`
" <Down>  |  `*_margin`          |  `{ 'left_margin': 0, 'right_margin': 0 }`
" --------+--------------------+---------------------------------------------------
"
"  option值
" -------------------+---------+-----------------------+--------------------------------------------------------
" Option             | Type    | Default               | Description                                            
" -------------------+---------+-----------------------+--------------------------------------------------------
"  `filter`            | string  |                       | Line filtering expression:  `g/../`  or  `v/../`
"  `left_margin`       | number  | 1                     | Number of spaces to attach before delimiter
"  `left_margin`       | string  |  `' '`                  | String to attach before delimiter
"  `right_margin`      | number  | 1                     | Number of spaces to attach after delimiter
"  `right_margin`      | string  |  `' '`                  | String to attach after delimiter
"  `stick_to_left`     | boolean | 0                     | Whether to position delimiter on the left-side
"  `ignore_groups`     | list    | ["String', "Comment'] | Delimiters in these syntax highlight groups are ignored
"  `ignore_unmatched`  | boolean | 1                     | Whether to ignore lines without matching delimiter
"  `indentation`       | string  |  `k`                    | Indentation method (keep, deep, shallow, none)
"  `delimiter_align`   | string  |  `r`                    | Determines how to align delimiters of different lengths
"  `align`             | string  |  `l`                    | Alignment modes for multiple occurrences of delimiters
" -------------------+---------+-----------------------+--------------------------------------------------------
"
"  option缩写
" -------------------+-----------------+-------------+--------------------------------
" Option name        | Shortcut key    | Abbreviated | Global variable                
" -------------------+-----------------+-------------+--------------------------------
"  `filter`            | CTRL-F          |  `[gv]/.*/`   |
"  `left_margin`       | CTRL-L          |  `l[0-9]+`    |
"  `right_margin`      | CTRL-R          |  `r[0-9]+`    |
"  `stick_to_left`     | <Left>, <Right> |  `<`  or  `>`   |
"  `ignore_groups`     | CTRL-G          |  `ig\[.*\]`   |  `g:easy_align_ignore_groups`
"  `ignore_unmatched`  | CTRL-U          |  `iu[01]`     |  `g:easy_align_ignore_unmatched`
"  `indentation`       | CTRL-I          |  `i[ksdn]`    |  `g:easy_align_indentation`
"  `delimiter_align`   | CTRL-D          |  `d[lrc]`     |  `g:easy_align_delimiter_align`
"  `align`             | CTRL-A          |  `a[lrc*]*`   |
" -------------------+-----------------+-------------+--------------------------------
"
" command: EasyAlign 开启对齐命令,按CTRL-X进行交互
"          LiveEasyAlign 开启live模式,live模式下按CTRL-P进行交互
"
"    nmap: ga EasyAlign
"    xmap: ga EasyAlign
"==============================================================

"==============================================================
"    file: Mark--Karkat.vim
"   brief: 高亮字符串
"
"    nmap: <leader>m 高亮或者取消高亮
"          <tab>m 清除所有的高亮
"          <tab>r 输入正则表达式来进行高亮或者取消高亮
"          <tab>n 跳到当前高亮字符串的下一个高亮处,并记为"last mark",
"                 不在高亮字符串的时候跳到下一个"last mark"处
"          <tab>N 跳到当前高亮字符串的上一个高亮处,并记为"last mark",
"                 不在高亮字符串的时候跳到上一个"last mark"处
"          <tab>/ 跳到下一个任意的高亮处
"          <tab>? 跳到上一个任意的高亮处
"
"   vmap:  <tab>r 输入正则表达式来进行高亮或者取消高亮
"
" command: Mark {pattern} 高亮pattern.只能是ignorecase
"          Mark 暂时去掉高亮,再次调用则高亮
"          MarkClear 清除所有的高亮
"          MarkSave 保存高亮,默认自动保存
"          MarkLoad 加载高亮,不默认自动加载
"
"==============================================================

"==============================================================
"    file: mode.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-numbers.vim
"   brief: text objects for numbers
"
"    omap:
"          n: 整数或者浮点数
"          i: 二进制数
"          x: 十六进制数
"          o: 八进制数
"==============================================================

"==============================================================
"    file: nerdtree.vim
"   brief: 目录树浏览
"
" command: NERDTree [<start-directory> | <bookmark>] 打开nerdtree
"          NERDTreeFromBookmark bookmark 在书签处打开nerdtree
"          NERDTreeToggle [<start-directory> | <bookmark>] 触发nerdtree
"          NERDTreeMirror 使用其他的nerdtree镜像
"          NERDTreeClose 关闭nerdtree
"          NERDTreeFind 在当前的目录树中查找文件
"          NERDTreeCWD 将目录树的根目录切到当前目录
"
" nerdtree buffer下的命令
" command: Bookmark [<name>] 用name给当前结点打标签
"          BookmarkToRoot <bookmark> 切到bookmark目录下,并以此为根目录
"          RevealBookmark <bookmark> 定位到bookmark处
"          OpenBookmark <bookmark> 此处的bookmark必须是文件,打开bookmark
"          ClearBookmarks [<bookmark>] 清除掉所有的标签,如果没给参数,会清除当所结果下的所有标签
"          ClearAllBookmarks 清除所有的标签
"          ReadBookmarks 重新载入标签
"
"    nmap: <leader>nt toggle nerdtree
"          <leader>nc nerdtree cwd
"          <leader>np nerdtree parrent
"          <leader>nf nerdtree file
"==============================================================

"==============================================================
"    file: large_file.vim
"   brief: 
"==============================================================

"==============================================================
"    file: fzf.vim
"   brief: 适配fzf工具
"
" command: [!]进行全屏模式
"      FZF {option} {path} " 从path进行搜索，不提供时为当前目录
"      以下命令以FZF为前缀
"      `Files [PATH]`    | Files (similar to  `:FZF` )
"      `GFiles [OPTS]`   | Git files (git ls-files)
"      `GFiles?`         | Git files (git status)
"      `Buffers`         | Open buffers
"      `Colors`          | Color schemes
"      `Ag [PATTERN]`    | {ag}{5} search result (ALT-A to select all, ALT-D to deselect all)
"      `Lines [QUERY]`   | Lines in loaded buffers
"      `BLines [QUERY]`  | Lines in the current buffer
"      `Tags [QUERY]`    | Tags in the project ( `ctags -R` )
"      `BTags [QUERY]`   | Tags in the current buffer
"      `Marks`           | Marks
"      `Windows`         | Windows
"      `Locate PATTERN`  |  `locate`  command output
"      `History`         |  `v:oldfiles`  and open buffers
"      `History:`        | Command history
"      `History/`        | Search history
"      `Snippets`        | Snippets ({UltiSnips}{6})
"      `Commits`         | Git commits (requires {fugitive.vim}{7})
"      `BCommits`        | Git commits for the current buffer
"      `Commands`        | Commands
"      `Maps`            | Normal mode mappings
"      `Helptags`        | Help tags [1]
"      `Filetypes`       | File types
"
"    nmap:  <leader>fp :FZF 提示输入
"           <leader>ff :FZFFiles
"           <leader>fg :FZFGFiles
"           <leader>fb :FZFBuffers
"           <leader>fa :FZFAg
"           <leader>fA :execute 'FZFAg ' . expand('<cword>')
"           <leader>fh :FZFHistory
"           <leader>fw :FZFWindows
"           <leader>fm :FZFMarks
"           <leader>; :FZFHistory:
"           <leader>fs :FZFSnippets
"           <leader>fc :FZFCommands
"           <leader>/ :FZFHistory/
"           <leader>ft :FZFBTags
"           <leader>fT :FZFTags
"           <leader>fz :FZFFzm
"           <leader>fM :FZFBookmarks
"           <leader><leader> nmap模式的map
"    omap:  <leader><leader> omap模式的map
"    xmap:  <leader><leader> xmap模式的map
"==============================================================

"==============================================================
"    file: vimtex.vim
"   brief: 
" depends: brew install tectonic
"==============================================================

"==============================================================
"    file: vim-javacomplete2.vim
"   brief: 
"==============================================================

"==============================================================
"    file: axring.vim
"   brief: 
"==============================================================

"==============================================================
"    file: iptables-vim.vim
"   brief: 
"==============================================================

"==============================================================
"    file: FastFlod.vim
"   brief: 
"==============================================================

"==============================================================
"    file: name-assign.vim
"   brief: 选择内容进行重构成变量
"
"  vmap: <leader>na 重构
"==============================================================

"==============================================================
"    file: vim-easymotion.vim
"   brief: 比普通的移动更强大的移动
"
"    nmap:
"    Default Mapping   | Details
"    ------------------|----------------------------------------------
"    <tab>f{char}      | Find {char} to the right. See |f|.
"    <tab>F{char}      | Find {char} to the left. See |F|.
"    <tab>t{char}      | Till before the {char} to the right. See |t|.
"    <tab>T{char}      | Till after the {char} to the left. See |T|.
"    <tab>w            | Beginning of word forward. See |w|.
"    <tab>W            | Beginning of WORD forward. See |W|.
"    <tab>b            | Beginning of word backward. See |b|.
"    <tab>B            | Beginning of WORD backward. See |B|.
"    <tab>e            | End of word forward. See |e|.
"    <tab>E            | End of WORD forward. See |E|.
"    <tab>ge           | End of word backward. See |ge|.
"    <tab>gE           | End of WORD backward. See |gE|.
"    <tab>j            | Line downward. See |j|.
"    <tab>k            | Line upward. See |k|.
"    <tab>n            | Jump to latest "/" or "?" forward. See |n|.
"    <tab>N            | Jump to latest "/" or "?" backward. See |N|.
"    <tab>s            | Find(Search) {char} forward and backward. See |f| and |F|.
"          <tab>J 跳到下面一行的开头
"          <tab>K 跳到上面一行的开头
"          <tab>; 跳到上个模式的下一个位置
"          <tab>, 跳到上个模式的上一个位置
"          <tab>. 重复操作
"          <tab>F 跨窗口的查找
"          <tab>L 跨窗口跳到某行
"          <tab>W 跨窗口跳到某个单词
"
"==============================================================

"==============================================================
"    file: dash.vim
"   brief: dash的vim集成，这个插件只有mac才有用
"
" command: Dash[!] [TERM] [KEYWORD] 在dash中搜索当前文件类型的关键字，
"                 [!]则全局搜索，第1个参数是要搜索的内容，第二个参数是doc
"                 set类型
"          DashKeywords[!] 显示当前使用的keywords，或者设置keywords 
"
"    nmap: <leader>ds 搜索当前光标的单词
"==============================================================

"==============================================================
"    file: vim-misc.vim
"   brief: viml库
"==============================================================

"==============================================================
"    file: gist-vim.vim
"   brief: 向gist.github.com提交gist
"
" command: Gist 把当前buffer提交到gist
"          '<,'>Gist 把选择的内容提交的gist
"          Gist -p 创建一个private的gist
"          Gist --private 
"          Gist -P 创建了个public的gist
"          Gist --public 
"          Gist -a 创建一个匿名的gist
"          Gist --anonymous
"          Gist -m 对所有打开的buffer创建一个gist
"          Gist --multibuffer
"          Gist -e 编辑一个打开的gist
"          Gist --edit
"          Gist -e foo.js 使用foo.js编辑gist
"          Gist -s something 提交gist并增加描述
"          Gist --description something
"          Gist -e -s something
"          Gist -d 删除打开的gist
"          Gist --delete
"          Gist -f fork打开的gist
"          Gist --fork
"          Gist +1 对打开的gist加星
"          Gist -1 取消对打开的gist加星
"          Gist xxxxx 拉取gist xxxxx
"          Gist -c xxxxx 把gist xxxxx拉下来并复制到clipboard
"          Gist -l 列出你所有的gist
"          Gist --list
"          Gist -l username 列出username所有的gist
"          Gist -la 列出所有人的gist
"          Gist --listall
"          Gist -b 在浏览器打开gist
"          Gist --browser
"          Gist! 当成新的gist进来post
"
"   在gist列表页:
"   'o'/<ENTER> 打开当前的gist
"   'b' 在浏览器打开当前的gist
"   'y' 复制到clipboard
"   'p' 复制粘贴
"   <ESC> 关闭列表
"==============================================================

"==============================================================
"    file: vim-tmux-focus-events.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-php-refactoring-toolbox.vim
"   brief: 
"==============================================================

"==============================================================
"    file: diffchar.vim
"   brief: 字符的diff
"
"    nmap:
"        <leader>dg get diff字符
"        <leader>dp put diff字符
"==============================================================

"==============================================================
"    file: critiq.vim
"   brief: 
"==============================================================

"==============================================================
"    file: asyncrun.vim
"   brief: 异步执行外部程序
"
" command: AsyncRun[!] [options] {cmd} 执行cmd命令，[!]关闭自动滚动
"          AsyncStop[!] 停止任务，[!]会使用KILL信号
"==============================================================

"==============================================================
"    file: typecast.vim
"   brief: 类型转换插件
"
"    nmap:
"      <leader>ct motion选中进行类型转换
"    xmap:
"      <leader>ct 选中进行类型转换
"==============================================================

"==============================================================
"    file: swift.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-conjoin.vim
"   brief: 执行J是，自动合并引号或者去掉行末转义符号
"==============================================================

"==============================================================
"    file: traces.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-lua.vim
"   brief: lua的高亮和缩进
"==============================================================

"==============================================================
"    file: xml.vim
"   brief: help xml-plugin
"
"    nmap: ;; 将当前word做为一个tag进行扩展
"   <LocalLeader>[ 删除<![CDATA[ ]]>分隔符
"   <LocalLeader>{ 删除<![CDATA[ ]]>块
"   <LocalLeader>] 删除<!-- -->分隔符
"   <LocalLeader>} 删除<!-- -->块
"   [[ 跳到上一个未关闭的tag
"   ]] 跳到下一个未关闭的tag
"   [] 跳到上一个关闭的tag
"   ][ 跳到下一个关闭的tag
"   [" 跳到上一个注释
"   ]" 跳到下一个注释
"   <LocalLeader>% 跳到匹配的tag
"   <LocalLeader>5 跳到匹配的tag
"   <LocalLeader>c 重命名tag
"   <LocalLeader>C 重命名tag和删除属性
"   <LocalLeader>d 删除包含的tag
"   <LocalLeader>D 删除tag和它里面的内容
"   <LocalLeader>e 加上关闭tag
"   <LocalLeader>f 折叠tag
"   <LocalLeader>F 所有的tag都折叠
"   <LocalLeader>g format
"   <LocalLeader>G cursor下的所有tag进行format
"   <LocalLeader>I 缩进所有的tag
"   <LocalLeader>j 将两个相同的结点连接在一起
"   <LocalLeader>l visual surround the block with listitem and para
"   <LocalLeader>o 在当前tag下插入一个tag
"   <LocalLeader>O 在当前tag外面插入一个tag
"   <LocalLeader>s 给右tag增加左tag
"   <LocalLeader>> tag右移
"   <LocalLeader>< tag左移
"   <LocalLeader>c 给选择的内容增加CDAT
"   <LocalLeader>< 给高亮的块注释
"   <LocalLeader>v 选择一个tag
"==============================================================

"==============================================================
"    file: ReplaceWithRegister.vim
"   brief: 使用寄存器的内容替换而不更新寄存器内容
"
"    nmap: [count]["x]gr{motion} 使用寄存器内容替换{motion}内容
"          [count]["x}grr 替换一行
"    xmap: ["x]gr 使用寄存器内容替换选中内容
"==============================================================

"==============================================================
"    file: InstantRst.vim
"   brief: 预览rst
"==============================================================

"==============================================================
"    file: vimproc.vim
"   brief: 异常执行库
"
" command: VimProcBang {path} 执行path命令然后echo结果,这是同步的
"          VimProcRead {path} 执行path命令然后将结果粘贴到当前的buffer
"          VimProcInstall {args} build
"==============================================================

"==============================================================
"    file: rainbow.vim
"   brief: 
"==============================================================

"==============================================================
"    file: NrrwRgn.vim
"   brief: 对选定内容进行编辑
"
" command: [range]NarrowRegion[!]
"          [range]NR[!] 选定range的内容到编辑区,[!]使用当前buffer
"          NarrowWindow[!]
"          NW[!] 选定当前窗口可见的内容到编辑区,[!]使用当前buffer
"          WidenRegion[!] 将修改写回到原来的buffer中,[!]会关闭当前的窗口
"          NRV[!] 将最后一次可视模式选择的内容放到编辑区,[!]会关闭当前的窗口
"          NUD 对当前的chunk进行diff模式
"          [range]NRPrepare[!]
"          [raneg]NRP[!] 标志内容，后面用NRM来将标志的显示出来,[!]会清掉之前的标志
"          NRMulti[!]
"          NRM[!] 将NRP标志的内容放到编辑区，同时清掉所有的标志,[!]使用当前buffer
"          NRSyncOnWrite
"          NRS 启动同步内容回到原始buffer
"          NRNoSyncOnWrite
"          NRN 关闭同步内容回到原始buffer
"          NRL[!] 重新上一次选择的区域到编辑区,[!]使用当前buffer
"
"    nmap: <leader>nr 后选择内容到编辑区
"
"    vmap: <leader>nr 将选择的内容放到编辑区
"==============================================================

"==============================================================
"    file: vim-plug.vim
"   brief: vim包管理
"
" command:
"   PlugInstall [name ...] [#threads]   Install plugins
"   PlugUpdate [name ...] [#threads]    Install or update plugins
"   PlugClean[!]    Remove unused directories (bang version will clean without prompt)
"   PlugUpgrade Upgrade vim-plug itself
"   PlugStatus  Check the status of plugins
"   PlugDiff    Examine changes from the previous update and the pending changes
"   PlugSnapshot[!] [output path]   Generate script for restoring the current snapshot of the plugins
"==============================================================

"==============================================================
"    file: vim-tbone.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-autoformat.vim
"   brief: 格式化代码
"
" command: Autoformat [{filetype}] 格式化当前文件
"
"    nmap: <leader>af 进行format
"==============================================================

"==============================================================
"    file: undotree.vim
"   brief: undo历史树
"
"    nmap: <leader>ut 触发undotree
"==============================================================

"==============================================================
"    file: agit.vim
"   brief: gitk插件
"
" command: Agit [{options}] 打开一个agit的tab
"          AgitFile [{options}] 只打开当前文件相关的log
"
"    nmap: 
"        J			<Plug>(agit-scrolldown-stat)
"        K			<Plug>(agit-scrollup-stat)
"        <C-j>		<Plug>(agit-scrolldown-diff)
"        <C-k>		<Plug>(agit-scrollup-diff)
"        u			<PLug>(agit-reload)
"        yh			<Plug>(agit-yank-hash)
"        <C-g>		<Plug>(agit-print-commitmsg)
"        q			<Plug>(agit-exit)
"        C          <Plus>(agit-git-cherry-pick)
"        co			<Plug>(agit-git-checkout)
"        cb			<Plug>(agit-git-checkout-b)
"        D			<Plug>(agit-git-branch-d)
"        rs			<Plug>(agit-git-reset-soft)
"        rm			<Plug>(agit-git-reset)
"        rh			<Plug>(agit-git-reset-hard)
"        rb			<Plug>(agit-git-rebase)
"        ri			<Plug>(agit-git-rebase-i)
"        di			<Plug>(agit-diff)
"        dl			<Plug>(agit-diff-with-local)
"==============================================================

"==============================================================
"    file: vim-macroscope.vim
"   brief: 编辑宏
"==============================================================

"==============================================================
"    file: vim-jsonpath.vim
"   brief: 打印json节点的位置或者跳到节点
"
"    nmap: <leader>rp :JsonPath
"          <leader>rg :JsonPath [Path]
"
" command: JsonPath 显示当前的节点位置
"          JsonPath [PATH] 跳到PATH的位置
"==============================================================

"==============================================================
"    file: vim-json.vim
"   brief: 高亮json
"==============================================================

"==============================================================
"    file: tmux.vim
"   brief: tmux语法文件高亮
"==============================================================

"==============================================================
"    file: vim-translate-me.vim
"   brief: 翻译插件
"
"    nmap:
"    vmap:
"      <leader>td 翻译当前光标下的文本，在命令行回显
"      <leader>tw 翻译当前光标下的文本，在窗口中显示
"      <leader>tr 翻译当前光标下的文本，替换光标下的文本为翻译内容
"==============================================================

"==============================================================
"    file: octave.vim--.vim
"   brief: 
"==============================================================

"==============================================================
"    file: codi.vim
"   brief: 执行当前文件输出
"
" command:
"     Codi {filetype} 打开codi
"     Codi! 关闭codi
"     Codi!! 触发codi
"==============================================================

"==============================================================
"    file: vim-scala.vim
"   brief: 
"
" command: SortScalaImports 将import排序
"==============================================================

"==============================================================
"    file: vim-over.vim
"   brief: 高亮:substitute
"
" command: OverCommandLine [{input}] 切到高亮模式,input会直接当成命令
"          OverCommandLineNoremap {lhs} {rhs} 类似于OverCommandLine，但是使用特殊的键映射
"
"==============================================================

"==============================================================
"    file: vim-githubinator.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-table-mode.vim
"   brief: 
" command:
"           :TableModeToggle 触发表格模式
"           :TableModeEnable 开启表格模式
"           :TableModeDisable 关闭表格模式
"           :Tablize 格式成表格
"           :TableModeRealign 表格重排
"           :TableAddFormula 增加formula
"           :TableEvalFormulaLine 计算formula
"           :TableSort[!] [i][u][r][n][x][o] 排序
"
"
"    nmap: <leader>t prefix
"          <leader>tm 触发table mode
"          <leader>tt tableize格式化选择行
"          <leader>T tableize格式化选择行，让用户选择分隔符
"          <leader>tr 重新对齐表格
"          <leader>t? 重新输出定义的formulas
"          [|         移到前一个单元格
"          ]|         移到后一个单元格
"          {|         移到上一个单元格
"          }|         移到下一个单元格
"          <leader>tdd 删除行
"          <leader>tdc 删除列
"          <leader>tfa 请求一个fomula给当前单元格
"          <leader>tfe 
"          <leader>ts  排序
"
"   imap: | 在table mode下触发创建表格
"         || 扩展表格头
"==============================================================

"==============================================================
"    file: incsearch.vim
"   brief: 高亮查找,/和?查找时会启用
"
"    nmap: <esc><esc> 取消高亮
"==============================================================

"==============================================================
"    file: vim-tmux-navigator.vim
"   brief: 使切窗口与tmux一致
"
"    nmap: <c-h> 跳到左边窗口
"          <c-j> 跳到下边窗口
"          <c-k> 跳到上边窗口
"          <c-l> 跳到右边窗口
"==============================================================

"==============================================================
"    file: vim-bookmarks.vim
"   brief: 给每行插入书签,可以带标签
"
" command: BookmarkToggle 触发书签
"          BookmarkAnnotate <TEXT> 增加/编辑/删除注释标签
"          BookmarkNext 跳到下一个书签
"          BookmarkPrev 跳到上一个书签
"          BookmarkShowAll 在新窗口显示所有书签
"          BookmarkClear 删除当前buffer的书签
"          BookmarkClearAll 删除所有的书签
"          BookmarkMoveup 将当前书签移上一行
"          BookmarkMoveDown 将当前书签移下一行
"          BookmarkSave <FILE_PATH> 保存书签
"          BookmarkLoad <FILE_PATH> 加载书签
"          BookmarkProjectLoad 加载工程下的书签
"
"    nmap: Mm :BookmarkToggle
"          Ma :BookmarkAnnotate
"          Ms :BookmarkShowAll
"          Mn :BookmarkNext
"          Mp :BookmarkPrev
"          Mc :BookmarkClear
"          Mu :BookmarkMoveUp
"          Md :BookmarkMoveDown
"==============================================================

"==============================================================
"    file: vim-git-msg-wheel.vim
"   brief: 补全上一次git提交消息 
"   
"    imap: <c-l>触发补全
"==============================================================

"==============================================================
"    file: vim-surround.vim
"   brief: 操作括号
"
" TARGETS:
"       () b
"       {} B
"       [] r
"       <>
"       '
"       "
"       `
"       w
"       W
"       s
"       p
"
"
"    nmap:  ds 删除surroundings
"           cs 修改surroundings
"           ys 增加surroundings
"           yss 整行增加surroundings
"           yS 换行surroundings
"           ySS 换行surroundings整行
"    vmap:  S 对选中的进行surroundings
"    imap:  <C-G>s
"           <C-S>
"==============================================================

"==============================================================
"    file: vim-signature.vim
"   brief: 显示mark标签
"
"    nmap:
"      mx 触发一个'x'字母的标签
"      m, 插入下一个可用的标签
"      m. 如果存在标签，则删除，否则插入下一个可用的标签
"      m- 删除当前行的所有标签
"      m<space> 删除所前buffer的所有标签
"      ]` 跳到下一个标签
"      [` 跳到上一个标签
"      ]' 跳到下一个标签的行首
"      [' 跳到上一个标签的行首
"      `] 跳到字母序的下一个标签
"      `[ 跳到字母序的上一个标签
"      '] 跳到字母序的下一个标签行首
"      '[ 跳到字母序的上一个标签行首
"      m/ 打开一个location list显示当前buffer的所有标签
"
"      0~9是类型标签，可以重复打
"      m[0-9] 触发一个shift+数字上的字母标签,这类型的标签可以重复打
"      m<S-[0-9]> 删除所有抽类型的标签
"      ]- 跳到下一个有同样标签的行
"      [- 跳到上一个有同样标签的行
"      ]= 跳到下一个任意类型的标签
"      [= 跳到上一个任意类型的标签
"      m? 打开一个location list显示所有当前buffer的类型标签
"      m<BS> 删除所有的类型标签
"
" command: SignatureToggleSigns 触发显示标签
"          SignatureRefresh 刷新显示
"          SignatureListBufferMarks [n] 显示当前buffer的所有标签，n是上下文行数
"          SignatureListGlobalMarks [n] 显示所有buffer的所有标签，n是上下文行数
"          SignatureListMarkers [marker] [n] 显示当前buffer所有的marker标签，n是上下文行数
"
"==============================================================

"==============================================================
"    file: vim-choosewin.vim
"   brief: 选择window
"
" command:
"         ChooseWin 选择window
"         ChooseWinSwap 交换window位置
"         ChooseWinSwapStay 交换window位置，保持光标不动
"
"    nmap:   <leader>sw ChooseWin
"
"   ChooseWin状态的key
"	| Key  | Action     | Description                   |
"	| ---- | ---------- | ----------------------------- |
"	| 0    | tab_first  | Select FIRST    tab           |
"	| [    | tab_prev   | Select PREVIOUS tab           |
"	| ]    | tab_next   | Select NEXT     tab           |
"	| $    | tab_last   | Select LAST     tab           |
"	| x    | tab_close  | Close current tab             |
"	| ;    | win_land   | Navigate to current window    |
"	| -    | previous   | Naviage to previous window    |
"	| s    | swap       | Swap windows               #1 |
"	| S    | swap_stay  | Swap windows but stay      #1 |
"	| <CR> | win_land   | Navigate to current window    |
"	|      | <NOP>      | Disable predefined keymap     |
"==============================================================

"==============================================================
"    file: ctrlsf.vim
"   brief: 搜索字符串
"
"     nmap: <leader>sf 开启命令行，提示输入文字进行搜索
"           <leader>sb 对当前光标的单词进行全匹配搜索
"           <leader>sn 开启命令行，把当前光标的单词填到参数
"           <leader>sp 开启命令行，当上一次搜索的单词填到参数
"           <leader>st 触发CtrlSF窗口
"           <leader>sr 触发在工程目录搜索还是当前目录搜索
"
"     vmap: <leader>sf 搜索当前选中的字符串
"           <leader>sF 开启命令行，把当前选中的填到参数，提示用户输入
"
"  command:
"           CtrlSF [arguments] {pattern} [path] ... 搜索
"           CtrlSFOpen 重新打开关闭的窗口
"           CtrlSFUpdate 更新上一次的模式搜索结果
"           CtrlSFClose 关闭CtrlSF窗口
"           CtrlSFClearHL 清除高亮
"           CtrlSFToggle 触发CtrlSF窗口
"           CtrlSFToggleMap 触发CtrlSF的默认mapping，只有在CtrlSF窗口有用
"
" CtrlSF窗口的mapping:
"         Enter, o, double-click - Open corresponding file of current line in the window which CtrlSF is launched from.
"         <C-O> - Like Enter but open file in a horizontal split window.
"         t - Like Enter but open file in a new tab.
"         p - Like Enter but open file in a preview window.
"         P - Like Enter but open file in a preview window and switch focus to it.
"         O - Like Enter but always leave CtrlSF window opening.
"         T - Like t but focus CtrlSF window instead of new opened tab.
"         M - Switch result window between normal view and compact view.
"         q - Quit CtrlSF window.
"         <C-J> - Move cursor to next match.
"         <C-K> - Move cursor to previous match.
" Maps by default in preview window:
"         <q>            Quit preview mode.
"
" Arguments:
" '-after', '-A'    匹配行后显示的行数
" '-before', '-B'   匹配行前显示的行数
" '-context', '-C'  匹配行前后显示的行数
" '-filetype'       指定搜索的文件类型
" '-filematch'      指定要搜索的文件名模式进行搜索
" '-ignorecase', '-I' 忽略大小写
" '-ignoredir'      忽略目录
" '-literal', '-L'  literal string
" '-matchcase', '-S' 识别大小写
" '-regex', '-R'    使用正则表达式匹配
" '-smartcase'      smartcase
"==============================================================

"==============================================================
"    file: columnskip.vim
"   brief: 行对齐的上下移动
"
" mappping: <leader>k 行对齐上移
"           <leader>j 行对齐下移
"==============================================================

"==============================================================
"    file: vim-indent-guides.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vifm.vim
"   brief: 
"==============================================================


"==============================================================
"    file: cscope.vim
"   brief: 
"
" command: cs help 帮助
"          cs kill 断开链接
"          cs reset 重新链接
"          cs show 显示链接
"          cs find {querytype} {name}
"             querytype可以是下面的选项
"		0 or s: Find this C symbol
"		1 or g: Find this definition
"		2 or d: Find functions called by this function
"		3 or c: Find functions calling this function
"		4 or t: Find this text string
"		6 or e: Find this egrep pattern
"		7 or f: Find this file
"		8 or i: Find files #including this file
"
"    nmap: <prefix> <c-\> cs find
"                   <c-_>s csc find
"                   <a-_>v vert scs find
"
"         <c-]> 跳到定义
"==============================================================

"==============================================================
"    file: NeoDebug.vim
"   brief: 
"==============================================================

"==============================================================
"    file: DoxygenToolkit.vim
"   brief: 插入doxygen的注释
"
" command: :Dox 给函数插入注释
"          :DoxAuthor 插入作者和版本
"          :DoxLic 插入证书
"
"    nmap: <leader>dx :Dox
"          <leader>da :DoxAuthor
"          <leader>dl :DoxLic
"==============================================================

"==============================================================
"    file: vim-gtest.vim
"   brief: 
"==============================================================

"==============================================================
"    file: a.vim
"   brief: 在源文件和头文件中跳转
"
" command: A 头文件跳到源文件中,或者相反
"          AS split和跳转
"          AV vertical split和跳转
"          AT new tab和跳转
"          AN cycles through matches
"          IH 跳转到cursor下的文件
"          IHS split和跳转
"          IHV vertical split和跳转
"          IHT new tab和跳转
"          ITN cycles through matches
"
"    nmap: <leader>as :A
"==============================================================

"==============================================================
"    file: vim-gencode-cpp.vim
"   brief: 
"==============================================================

"==============================================================
"    file: quickfix.vim
"   brief: 
"
"    nmap: <leader>qk 跳到上一个quickfix或者loclist的内容
"          <leader>qj 跳到下一个quickfix或者loclist的内容
"          <leader>qc 关闭quickfix或者loclist
"          <leader>qo 打开quickfix或者loclist
"          <leader>qq 打开quickfix
"          <leader>ql 打开loclist
"
" quickfix的nmap
"     q: cclose
"==============================================================

"==============================================================
"    file: vimunx.vim
"   brief: 与tmux交互的插件
"
" command: VimuxPromptCommand 提示输入命令运行
"          VimuxRunLastCommand 运行上一次的命令
"          VimuxInspectRunner 进入运行窗口并进入选择模式
"          VimuxCloseRunner 关闭运行窗口
"          VimuxInterruptRunner 给运行窗口发送中断信号
"          VimuxZoomRunner 将运行窗口全屏，在tmux下使用<prefix>z返回
"
"    nmap: <leader>vp :VimuxPromptCommand
"          <leader>vl :VimuxRunLastCommand
"          <leader>vi :VimuxInspectRunner
"          <leader>vq :VimuxCloseRunner
"          <leader>vc :VimuxInterruptRunner
"          <leader>vz :VimuxZoomRunner
"==============================================================

"==============================================================
"    file: vim-grepper.vim
"   brief: grep工具，支持git,ag,ack等
"
" command:
"     Grepper 启动交互的grep
"     Todo 查找todo
"
"    nmap:
"      gp 查找一个operator
"      <leader>* 查找当前单词
"
"    xmap:
"      gp 查找选中
"==============================================================

"==============================================================
"    file: nginx.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-illuminatea.vim
"   brief: 
"==============================================================

"==============================================================
"    file: github-complete.vim
"   brief: 
"==============================================================

"==============================================================
"    file: git-messenger.vim
"   brief: 查看当前行的提交历史
"
"  command: 
"          GitMessenger 查看提交记录
"          GitMessengerClose 关闭查看窗口
"
"    nmap: <leader>gm GitMessenger
"==============================================================

"==============================================================
"    file: leetcode.vim
"   brief:
"==============================================================

"==============================================================
"    file: vim-http.vim
"   brief: 
"==============================================================

"==============================================================
"    file: ale.vim
"   brief: 异步语法检查
"
" command: ALELint 进行检查
"          ALEPrevious 上一个错误或警告,不循环
"          ALEPreviousWrap 上一个错误或警告,循环
"          ALENext 下一个错误或警告,不循环
"          ALENextWrap 下一个错误或警告,循环
"          ALEToggle 触发启用ale
"          ALEEnable 启用ale
"          ALEDisable 禁用ale
"          ALEDetail 显示完整的错误信息在底行
"
"    nmap: <leader>al ALELint
"          <leader>ad ALEDetail
"          <leader>at ALEToggle
"          <leader>aj ALENextWrap
"          <leader>ak ALEPreviousWrap
"==============================================================

"==============================================================
"    file: vim-argwrap.vim
"   brief: 参数换行和同行模式转换
"
" command: :ArgWrap 转换
"    nmap: <leader>aw :ArgWrap
"==============================================================

"==============================================================
"    file: vim-yaml-folds.vim
"   brief: 
"==============================================================

"==============================================================
"    file: vim-expand-region.vim
"   brief: 选择区域
"
"    nmap:
"       + 展开选择
"       - 缩小选择
"==============================================================

"==============================================================
"    file: conflict-marker.vim
"   brief: 冲突的处理
"
" command: 
"         ConflictMarkerThemselves
"         ConflictMarkerOurselves
"         ConflictMarkerBoth
"         ConflictMarkerNone
"         ConflictMarkerNextHunk
"         ConflictMarkerPrevHunk
"         ConflictMarkerEnable 开启conflict marker模式
"         ConflictMarkerDisable 关闭conflict marker模式
"    nmap:
"         [x 跳到上一个冲突
"         ]x 跳到下一个冲突
"         ct 使用它们
"         co 使用自己
"         cn 都不使用
"         cb 都使用
"==============================================================

